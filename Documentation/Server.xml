<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Server</name>
    </assembly>
    <members>
        <member name="M:NetJS.Server.API.HTTPServer.on(System.String,System.Object)">
            <summary>Creates an event listener</summary>
            <param name="event">The name of the event (connection)</param>
            <param name="func">The function to call</param>
            <returns>undefined</returns>
            <example><code lang="javascript">HttpServer.on("connection", function(){
                Log.write(id);
            });</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getCookie(System.String)">
            <summary>Reads a cookie.</summary>
            <param name="name">The name of the cookie (string)</param>
            <returns>The cookie value (string)</returns>
            <example><code lang="javascript">var ssid = Request.getCookie("SSID");</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getCookies">
            <summary>Reads all cookies.</summary>
            <returns>An object with the keys being the cookie names and the values the cookie values</returns>
            <example><code lang="javascript">var cookies = Response.getCookies();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getHeader(System.String)">
            <summary>Reads a request header.</summary>
            <param name="name">The name of the header (string)</param>
            <returns>The header value (string)</returns>
            <example><code lang="javascript">var acceptedTypes = Request.getHeader("Accept");</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getHeaders">
            <summary>Reads all headers.</summary>
            <returns>An object with the keys being the header names and the values the header values</returns>
            <example><code lang="javascript">var headers = Request.getHeaders();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getUrl">
            <summary>Gets the requested URL</summary>
            <returns>The url (string)</returns>
            <example><code lang="javascript">var url = Request.getUrl();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getPath">
            <summary>Gets the requested path</summary>
            <returns>The path (string[])</returns>
            <example><code lang="javascript">var path = Request.getPath();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getParameter(System.String)">
            <summary>Gets a parameter from the query part of the url</summary>
            <param name="name">The name of the parameter (string)</param>
            <returns>The value (string)</returns>
            <example><code lang="javascript">var value = Request.getParameter("q");</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getParameters">
            <summary>Gets all parameters from the query part of the url</summary>
            <returns>An object with the keys being the parameter names and the values being the parameter values (string)</returns>
            <example><code lang="javascript">var parameters = Request.getParameters();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getContent">
            <summary>Gets the content of the request</summary>
            <returns>The content (string)</returns>
            <example><code lang="javascript">var content = Request.getContent();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getEncoding">
            <summary>Gets the encoding of the request content</summary>
            <returns>The web name (registered with IANA) of the encoding (string)</returns>
            <example><code lang="javascript">var encoding = Request.getEncoding();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getMethod">
            <summary>Gets the method of the request</summary>
            <returns>The method (string)</returns>
            <example><code lang="javascript">var method = Request.getMethod();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.isSecure">
            <summary>Checks if the request is secure (via HTTPS)</summary>
            <returns>If the request is secure (boolean)</returns>
            <example><code lang="javascript">var secure = Request.isSecure();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getForm">
            <summary>Gets the form content of the request</summary>
            <returns>An object with the keys being the field names and the values being the field values</returns>
            <example><code lang="javascript">var form = Request.getForm();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getSessionId">
            <summary>Gets the sessionId from IIS</summary>
            <returns>The session id, a unique string for each different session</returns>
            <example><code lang="javascript">var sessionId = Request.getSessionId();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getUser">
            <summary>Gets information about the user IP and agent</summary>
            <returns>An object with {
                ip: "192.0.168.2",
                agent: "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) ..."
            }</returns>
            <example><code lang="javascript">var user = Request.getUser();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getFileCount">
            <summary>Gets the number of files in the request</summary>
            <returns>The file count (number)</returns>
            <example><code lang="javascript">var fileCount = Request.getFileCount();</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.getFile(System.Int32)">
            <summary>Gets a file from the request</summary>
            <param name="index">The index of the file (number)</param>
            <returns>An object with: {
                content: [[Uint8Array]],
                contentType: "image/png",
                size: 35937, // bytes,
                name: "image.png"
            }</returns>
            <example><code lang="javascript">var file = Request.getFile(0);</code></example>
        </member>
        <member name="M:NetJS.Server.API.Request.saveFile(System.Int32,System.String)">
            <summary>Saves a file to disk</summary>
            <param name="index">The index of the file (number)</param>
            <param name="name">The name of the new file (string)</param>
            <example><code lang="javascript">Request.saveFile(0, "image.png");</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.setCookie(System.String,System.String,System.Object)">
            <summary>Writes a cookie.</summary>
            <param name="name">The name of the cookie (string)</param>
            <param name="value">The value to set (string)</param>
            <param name="options">Options: expires (date), path (string) and httpOnly (boolean)</param>
            <example><code lang="javascript">Response.setCookie("SSID", "AE3oaD8COGojttJue", {
                expires: new Date(),
                path: "localhost/example",
                httpOnly: false
            });</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.removeCookie(System.String)">
            <summary>Removes a cookie.</summary>
            <param name="name">The name of the cookie (string)</param>
            <example><code lang="javascript">Response.removeCookie("SSID")</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.setHeader(System.String,System.String)">
            <summary>Writes an header.</summary>
            <param name="name">The name of the header (string)</param>
            <param name="value">The value to set (string)</param>
            <example><code lang="javascript">Response.setHeader("Content-Type", "application/json");</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.removeHeader(System.String)">
            <summary>Removes an header.</summary>
            <param name="name">The name of the header (string)</param>
            <example><code lang="javascript">Response.removeHeader("ApplicationID")</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.sendBytes(System.Object)">
            <summary>Sends an array of bytes and exits the execution immediately</summary>
            <param name="bytes">The bytes to send (Uint8Array)</param>
            <example><code lang="javascript">Request.sendBytes(bytes).then(success => {
                if (success) { ... }
            });</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.sendFile(System.String)">
            <summary>Sends an file and exits the execution immediately</summary>
            <param name="name">The name of the file (string)</param>
            <example><code lang="javascript">Request.sendFile("image.png").then(success => {
                if (success) { ... }
            });</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.setStatusCode(System.Int32)">
            <summary>Sets the response status code.</summary>
            <param name="statusCode">The status code (number)</param>
            <example><code lang="javascript">Response.setStatusCode(200);</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.setStatusDescription(System.String)">
            <summary>Sets the response status description.</summary>
            <param name="statusDescription">The status description (number)</param>
            <example><code lang="javascript">Response.setStatusDescription(200);</code></example>
        </member>
        <member name="M:NetJS.Server.API.Response.setEncoding(System.String)">
            <summary>Sets the response encoding.</summary>
            <param name="encoding">The web name (registered with IANA) of the encoding (string)</param>
            <example><code lang="javascript">Response.setEncoding("UTF-8");</code></example>
        </member>
        <member name="M:NetJS.Server.API.WebSocket.on(System.String,System.Object)">
            <summary>Creates an event listener</summary>
            <param name="event">The name of the event (connection|message|close|error)</param>
            <param name="func">The function to call</param>
            <returns>undefined</returns>
            <example><code lang="javascript">WebSocket.on("connection", function(id){
                Log.write(id);
            });</code></example>
        </member>
        <member name="M:NetJS.Server.API.WebSocket.send(System.String,System.String)">
            <summary>Send a message to a websocket</summary>
            <param name="id">The id of the socket (string)</param>
            <param name="message">The message (string)</param>
            <returns>undefined</returns>
            <example><code lang="javascript">WebSocket.send(id, "{}");</code></example>
        </member>
        <member name="M:NetJS.Server.API.WebSocket.close(System.String)">
            <summary>Closes a websocket connection</summary>
            <param name="id">The id of the socket (string)</param>
            <returns>undefined</returns>
            <example><code lang="javascript">WebSocket.close(id);</code></example>
        </member>
        <member name="M:NetJS.Server.API.WebSocket.isOpen(System.String)">
            <summary>Checks if there is an open connection to a websocket</summary>
            <param name="id">The id of the socket (string)</param>
            <returns>If there is an open connection (boolean)</returns>
            <example><code lang="javascript">var open = WebSocket.isOpen(id);</code></example>
        </member>
    </members>
</doc>
