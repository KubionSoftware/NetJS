<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetJS</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:NetJS.API.Application" -->
        <member name="M:NetJS.API.Application.get(System.String)">
            <summary>Application.get takes a key and returns the value.</summary>
            <param name="key">The key to get a value from</param>
            <returns>Value linked to key.</returns>
            <example><code lang="javascript">var value = Application.get("userID");</code></example>
        </member>
        <member name="M:NetJS.API.Application.set(System.String,System.Object)">
            <summary>Application.set stores a value under a key.</summary>
            <param name="key">The key to set a value with</param>
            <param name="value">The value to link to the key</param>
            <example><code lang="javascript">Application.set("userId", user.id);</code></example>
        </member>
        <member name="M:NetJS.API.Application.contains(System.String)">
            <summary>Application.contains checks if the application contains a key.</summary>
            <param name="key">The key to check</param>
            <example><code lang="javascript">if (Application.contains("userId")) { ... }</code></example>
        </member>
        <member name="M:NetJS.API.Application.remove(System.String)">
            <summary>Application.remove takes a key and removes it.</summary>
            <param name="key">The key to get a value from</param>
            <example><code lang="javascript">Application.remove("userId");</code></example>
        </member>
        <member name="M:NetJS.API.Application.clear">
            <summary>Application.clear removes all values.</summary>
            <example><code lang="javascript">Application.clear();</code></example>
        </member>
        <member name="M:NetJS.API.Application.getAll">
            <summary>Application.getAll returns all global values.</summary>
            <returns>Object containing all keys and values.</returns>
            <example><code lang="javascript">var application = Application.getAll();</code></example>
        </member>
        <member name="M:NetJS.API.Base64.decode(System.String)">
            <summary>Decodes a base64 string.</summary>
            <param name="base64">The string to decode</param>
            <returns>Returns the decoded string.</returns>
            <example><code lang="javascript">var decoded = Base64.decode("TWFuIGlzIGRpc3Rpbmd1aXNoZWQ=");</code></example>
        </member>
        <member name="M:NetJS.API.Base64.encode(System.String)">
            <summary>Encodes a string as a base64 string.</summary>
            <param name="value">The string to encode</param>
            <returns>Returns the encoded string.</returns>
            <example><code lang="javascript">var encoded = Base64.encode("Man is distinguished");</code></example>
        </member>
        <member name="M:NetJS.API.Base64.encodeBytes(System.Object)">
            <summary>Encodes a byte array as a base64 string.</summary>
            <param name="bytes">The bytes to encode</param>
            <returns>Returns the encoded string.</returns>
            <example><code lang="javascript">var bytes = IO.readBytes("image.png");
            var encoded = Base64.encodeBytes(bytes);</code></example>
        </member>
        <member name="T:NetJS.API.Functions">
            <summary>Functions class contain functions that are injected directly into the engine.</summary>
        </member>
        <member name="M:NetJS.API.Functions.include(System.String,System.Object)">
            <summary>include  takes a file, runs the code in the file and writes the result to the output buffer.
            If an object is given as second parameter, those variables will be set in the code before execution.
            Default filetype is ".js".</summary>
            <param name="file">The file to include</param>
            <param name="variables">An object with variables to setup the file before execution</param>
            <example><code lang="javascript">include("renderLayout.js", {loggedIn: true});</code></example>
        </member>
        <member name="M:NetJS.API.Functions.load(System.String,System.Object)">
            <summary>load takes a file, runs the code in the file and returns the value.
            If an object is given as second parameter, those variables will be set in the code before execution.
            Default filetype is ".js".</summary>
            <param name="file">The file to load</param>
            <param name="variables">An object with variables to setup the file before execution</param>
            <returns>Returns the output of the template.</returns>
            <example><code lang="javascript">var output = load("renderLayout.js", {loggedIn: true});</code></example>
        </member>
        <member name="M:NetJS.API.Functions.out(System.String)">
            <summary>out writes a string to the output buffer</summary>
            <param name="value">The string to write</param>
            <example><code lang="javascript">out(JSON.stringify(data));</code></example>
        </member>
        <member name="M:NetJS.API.Functions.outLine(System.String)">
            <summary>outLine writes a string to the output buffer and appends a newline</summary>
            <param name="value">The string to write</param>
            <example><code lang="javascript">outLine(JSON.stringify(data));</code></example>
        </member>
        <member name="M:NetJS.API.Functions.end(System.Object)">
            <summary>end returns the value to the caller</summary>
            <param name="value">The output to return</param>
            <example><code lang="javascript">end("<html></html>");</code></example>
        </member>
        <member name="M:NetJS.API.Functions.setTimeout(System.Object,System.Double)">
            <summary>Schedules a function to be called after a certain amount of time</summary>
            <param name="function">The function to call</param>
            <param name="time">The time in milliseconds</param>
            <example><code lang="javascript">setTimeout(() => {
                Log.write("It's time!");
            }, 1500);</code></example>
        </member>
        <member name="M:NetJS.API.Functions.setInterval(System.Object,System.Int32)">
            <summary>Schedules a function to be called every N milliseconds</summary>
            <param name="function">The function to call</param>
            <param name="time">The time in milliseconds</param>
            <example><code lang="javascript">setInterval(() => {
                Log.write("Tick");
            }, 1000);</code></example>
        </member>
        <member name="M:NetJS.API.Functions.require(System.String)">
            <summary>import takes a file and runs the code in the file with the current agent.
            This way functions and variables can be imported.
            Default filetype is ".js".</summary>
            <param name="file">The file to import</param>
            <example><code lang="javascript">import("date");
            FormatDate(new Date());</code></example>
        </member>
        <member name="M:NetJS.API.Functions.includeNamespace(System.String)">
            <summary>Includes a namespace from the .NET environment</summary>
            <param name="namespace">The namespace to include</param>
            <example><code lang="javascript">includeNamespace("System.Text");</code></example>
        </member>
        <member name="M:NetJS.API.Functions.includeDLL(System.String)">
            <summary>Includes a dll</summary>
            <param name="file">The dll file to include</param>
            <example><code lang="javascript">includeDLL("ADFS.dll");</code></example>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NetJS.API.HTTP" -->
        <member name="M:NetJS.API.HTTP.execute(System.String,System.String,System.Object)">
            <summary>Executes a HTTP request.</summary>
            <param name="connectionName">A connection from the connections.json or an url</param>
            <param name="query">The query to attach to the url (only usable when connectionName is not an url)</param>
            <param name="options">Optional settings: method (string), content (string), cookies (object), headers (object)</param>
            <returns>Returns the response, as a json object if response Content-Type is 'application/json'.</returns>
            <example><code lang="javascript">var result = HTTP.execute("REST", "articles", {
                method: "POST",
                content: JSON.stringify(article),
                cookies: {
                    UserID: "23433"
                },
                headers: {
                    ApplicationID: "NetJS"
                },
                output: "text|binary|base64"
            });</code></example>
        </member>
        <member name="T:NetJS.API.IO">
            <summary>IO class contains methods for file and directory manipulation.</summary>
            <example>IO can read, write and delete a file:
            <code lang="javascript">var file = "example.txt";
            IO.write(file, "Hello World!");
            console.log(IO.read(file); //prints: Hello World!
            IO.deleteFile(file);</code></example>
        </member>
        <member name="M:NetJS.API.IO.writeText(System.String,System.String)">
            <summary>Writes text into a file.</summary>
            <param name = "file">A filename (string)</param>
            <param name = "content">The text to be written (string)</param>
            <example><code lang="javascript">IO.writeText("data.json", "Hello World!");</code></example>
        </member>
        <member name="M:NetJS.API.IO.writeBytes(System.String,System.Object)">
            <summary>Writes bytes into a file.</summary>
            <param name = "file">A filename</param>
            <param name = "content">The bytes to be written (Uint8Array)</param>
            <example><code lang="javascript">IO.writeBytes("image.png", bytes);</code></example>
        </member>
        <member name="M:NetJS.API.IO.readText(System.String)">
            <summary>Reads and returns text content of a file.</summary>
            <param name= "file">A filename to read from (string)</param>
            <returns>The content of the file (string)</returns>
            <example><code lang="javascript">var text = IO.readText("data.json");</code></example>
        </member>
        <member name="M:NetJS.API.IO.readBytes(System.String)">
            <summary>Reads and returns binary content of a file.</summary>
            <param name= "file">A filename to read from (string)</param>
            <returns>The binary content of the file (Uint8Array)</returns>
            <example><code lang="javascript">var bytes = IO.readBytes("image.png");</code></example>
        </member>
        <member name="M:NetJS.API.IO.deleteFile(System.String)">
            <summary>Deletes a file.</summary>
            <param name= "file">A filename to delete</param>
            <example><code lang="javascript">IO.deleteFile("data.json");</code></example>
        </member>
        <member name="M:NetJS.API.IO.copyFile(System.String,System.String)">
            <summary>Copies a file.</summary>
            <param name= "source">The file to copy</param>
            <param name= "destination">The file to copy to</param>
            <example><code lang="javascript">IO.copyFile("a.txt", "b.txt");</code></example>
        </member>
        <member name="M:NetJS.API.IO.moveFile(System.String,System.String)">
            <summary>Moves/renames a file.</summary>
            <param name= "source">The source location</param>
            <param name= "destination">The destination</param>
            <example><code lang="javascript">IO.moveFile("a.txt", "files/b.txt");</code></example>
        </member>
        <member name="M:NetJS.API.IO.moveDirectory(System.String,System.String)">
            <summary>Moves/renames a directory.</summary>
            <param name= "source">The source location</param>
            <param name= "destination">The destination</param>
            <example><code lang="javascript">IO.moveDirectory("files", "documents/files");</code></example>
        </member>
        <member name="M:NetJS.API.IO.getFiles(System.String)">
            <summary>Get all files in a directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">var files = IO.getFiles("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.getDirectories(System.String)">
            <summary>Get all directories in a directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">var directories = IO.getDirectories("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.fileExists(System.String)">
            <summary>Checks if the file exists.</summary>
            <param name= "file">The file path</param>
            <example><code lang="javascript">var exists = IO.fileExists("name.txt");</code></example>
        </member>
        <member name="M:NetJS.API.IO.directoryExists(System.String)">
            <summary>Checks if the directory exists.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">var exists = IO.directoryExists("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.createDirectory(System.String)">
            <summary>Creates a new directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">IO.createDirectory("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.deleteDirectory(System.String)">
            <summary>Deletes a directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">IO.deleteDirectory("documents");</code></example>
        </member>
        <member name="T:NetJS.API.Log">
            <summary>Log class contains methods for logging to a file.</summary>
        </member>
        <member name="M:NetJS.API.Log.write(System.String)">
            <summary>Writes a log to the system configured log.</summary>
            <param name="log">The log that needs to be written</param>
            <example><code lang="javascript">Log.write("Hello world!");</code></example>
        </member>
        <member name="T:NetJS.API.Session">
            <summary>Sessions are implemented using ASP.NET. You can use the session to store and retrieve values.</summary>
            <remarks>This class can set, get and remove key-value pairs.
            Unlike SessionStorage in browsers, this session allows you to store all types of variables instread of only strings.</remarks>
            <example name="Functions implementation">Here you can see the functions of this class in action:
            <code lang="javascript">Sessions.set("key", "value");
            console.log(Sessions.get("key"); //prints: value
            Sessions.delete("key");</code></example>
        </member>
        <member name="M:NetJS.API.Session.get(System.String)">
            <summary>Sessions.get takes a key, gets the value linked in the session and returns the value.</summary>
            <param name="key">The key to get a value from</param>
            <returns>Value linked to key.</returns>
            <example><code lang="javascript">var value = Sessions.get("userID");</code></example>
        </member>
        <member name="M:NetJS.API.Session.set(System.String,System.Object)">
            <summary>Sessions.set takes a key and a value and sets the link in the session.</summary>
            <param name="key">The key to set a value with</param>
            <param name="value">The value to link to the key</param>
            <example><code lang="javascript">Session.set("userId", user.id);</code></example>
        </member>
        <member name="M:NetJS.API.Session.contains(System.String)">
            <summary>Session.contains checks if the session contains a key.</summary>
            <param name="key">The key to check</param>
            <example><code lang="javascript">if (Session.contains("userId")) { ... }</code></example>
        </member>
        <member name="M:NetJS.API.Session.remove(System.String)">
            <summary>Sessions.remove takes a key and removes it from the session.</summary>
            <param name="key">The key to get a value from</param>
            <example><code lang="javascript">Sessions.remove("userId");</code></example>
        </member>
        <member name="M:NetJS.API.Session.clear">
            <summary>Sessions.clear removes all values from the session.</summary>
            <example><code lang="javascript">Sessions.clear();</code></example>
        </member>
        <member name="M:NetJS.API.Session.getAll">
            <summary>Sessions.getAll returns the entire session object.</summary>
            <returns>Object containing all keys and values.</returns>
            <example><code lang="javascript">var session = Sessions.getAll();</code></example>
        </member>
        <member name="T:NetJS.API.SQLAPI">
            <summary>SQL class contains basic methods for communicating with SQL databases configured in the config.</summary>
            <remarks>This class can make SELECT, UPDATE, INSERT and custom query's.
            Configuration is needed to make a DB connection.</remarks>
            <configuration>To enable acces to an SQL database, the connection must be defined in a file in the root of the project named 'connections.json'.
            <example>Configuration structure:<code lang="json">{"Data": {"type": "sql", "connectionString": "Server=example.com;Database=ExampleName;UserId=sa;Password=test"}}</code></example></configuration>
            <example name="Query's">This example expects to have the following connection in the configuration:<code lang="json">{"Data": {"type": "sql", "connectionString": "Server=example.com;Database=ExampleName;UserId=sa;Password=test"}}</code>
            We can INSERT a new user and UPDATE his values:
            <code lang="javascript">var db = "ExampleName";
            var user = {name: "Hello World!", mail: "HelloWorld@example.com"};
            var id = SQL.insert(db, "users", user);
            user.name = "NewExample"
            // updating our db user based on the id of insert
            SQL.set(db, "users", id, user);</code>
            Now let's check if everything went fine:
            <code lang="javascript">console.log(SQL.get(db, "users")); //Prints all users</code>
            And to set the db back, we delete the row with a custom query:
            <code lang="javascript">var query = "DELETE FROM users WHERE id = " + id.toString() + ";";
            SQL.execute(db, query);</code></example>
        </member>
        <member name="M:NetJS.API.SQLAPI.execute(System.String,System.String)">
            <summary>SQL.execute takes a connectionName and a query, executes the query and returns the result if the query is a SELECT statement.</summary>
            <param name="connectionName">Name of a configured connection</param>
            <param name="query">The query to be executed</param>
            <returns>the result if the query is a SELECT statement.</returns>
            <example><code lang="javascript">var id = SQL.execute("NETDB", "SELECT * FROM users;");</code></example>
        </member>
		<member name="T:NetJS.API.OLAP">
            <summary>OLAP class contains methods for communicating with SQL Server Analysis Services configured in the config.</summary>
            <remarks>This class can execute MDX SELECT query's and get all the information needed to create such a query.
            Configuration is needed to make a Adomd.net connection.</remarks>
            <configuration>To enable acces to an SQL database, the connection must be defined in a file in the root of the project named 'connections.json'.
            <example>Configuration structure:<code lang="json">{"SSAS": {"type": "olap", "connectionString": "Initial Catalog=exampleCatalog;Data Source=ssasLocation;User ID=Domain\\exampleUserName;Password=examplePassword"}}</code></example></configuration>
        </member>
		<member name="M:NetJS.API.OLAP.execute(System.String)">
			<summary>OLAP.execute takes a connectionName and a query, executes the query and returns the result of the MDX query in JSON format.</summary>
			<param name="connectionName">Name of a configured connection</param>
			<param name="query">The query to be executed</param>
			<returns>the result of the MDX query in JSON format.</returns>
			<example><code lang="javascript">var graph = OLAP.execute("olap", "SELECT [Measures].[Page View Count] on columns, [Page].[Page].Children on rows FROM [Model];");</code></example>
		</member>
		<member name="M:NetJS.API.OLAP.getDimensionsByFact(System.String,System.String)">
			<summary>OLAP.getDimensionsByFact takes a connectionName and a fact, returns a list of all available dimensions for a selected fact on the cubes that are visible.</summary>
			<param name="connectionName">Name of a configured connection</param>
			<param name="fact">The selected fact</param>
			<returns>the list in JSON format of all available dimensions for the selected fact on the cubes that are visible.</returns>
			<example><code lang="javascript">var list = OLAP.getDimensionsByFact("olap", "PageView");</code></example>
        </member>
		<member name="M:NetJS.API.OLAP.getMeasuresByFact(System.String, System.String)">
			<summary>OLAP.getMeasuresByFact takes a connectionName and a fact, returns a list of all available measures of a selected fact on the cubes that are visible.</summary>
			<param name="connectionName">Name of a configured connection</param>
			<param name="fact">The selected fact</param>
			<returns>the list in JSON format of all available measures of the selected fact on the cubes that are visible.</returns>
			<example><code lang="javascript">var list = OLAP.getMeasuresByFact("olap", "PageView");</code></example>
		</member>
		<member name="M:NetJS.API.OLAP.getFacts(System.String)">
			<summary>OLAP.getFacts takes a connectionName and returns a list of all available facts/measure_groups of the cubes that are visible.</summary>
			<param name="connectionName">Name of a configured connection</param>
			<returns>the list in JSON format of all available facts/measure_groups of the cubes that are visible.</returns>
			<example><code lang="javascript">var list = OLAP.getFacts("olap");</code></example>
		</member>
		<member name="M:NetJS.API.OLAP.getHierarchiesByDimension(System.String, System.String)">
			<summary>OLAP.getHierarchiesByDimension takes a connectionName and a dimension, returns a list of all available hierarchies of a selected dimension on the cubes that are visible.</summary>
			<param name="connectionName">Name of a configured connection</param>
			<param name="dimension">The selected dimension</param>
			<returns>the list in JSON format of all available hierarchies of the selected dimension on the cubes that are visible.</returns>
			<example><code lang="javascript">var list = OLAP.getHierarchiesByDimension("olap", "StartDate");</code></example>
		</member>
		<member name="getMembers(System.String, System.String, System.String)">
			<summary>OLAP.getMembers takes a connectionName, a dimension and an hierarchy, returns a list of all available members of a selected dimension.hierarchy on the cubes that are visible.</summary>
			<param name="connectionName">Name of a configured connection</param>
			<param name="dimension">The selected dimension</param>
			<param name="hierarchy">The selected hierarchy</param>
			<returns>the list in JSON format of all available members of the selected dimension.hierarchy on the cubes that are visible.</returns>
			<example><code lang="javascript">var list = OLAP.getMembers("olap", "StartDate", "Month");</code></example>
		</member>
		<member name="T:NetJS.API.XDoc">
            <summary>A Compatibility class for XDoc, to ensure possibility of usage of XDoc with NetJS.</summary>
        </member>
        <member name="M:NetJS.API.XDoc.on(System.String,System.Object)">
            <summary>Creates an event listener</summary>
            <param name="event">The name of the event (connection)</param>
            <param name="func">The function to call</param>
            <returns>undefined</returns>
            <example><code lang="javascript">XDoc.on("message", function(data){
                Log.write(data);
            });</code></example>
        </member>
        <member name="M:NetJS.API.XDoc.get(System.String,System.String,System.String)">
            <summary>XDoc.get gets a value from the XDoc session</summary>
            <param name="key">Value name</param>
            <param name="context">Context name</param>
            <param name="id">ID name</param>
            <returns>The session value as a string</returns>
        </member>
        <member name="M:NetJS.API.XDoc.set(System.String,System.String,System.String,System.Object)">
            <summary>XDoc.set sets a value in the XDoc session</summary>
            <param name="key">Value name</param>
            <param name="context">Context name</param>
            <param name="id">ID name</param>
            <param name="value">The value to set, is converted to a string</param>
            <returns>Undefined</returns>
        </member>
        <member name="M:NetJS.API.XDoc.include(System.String,System.Object)">
            <summary>XDoc.include includes an XDoc template and writes the result to the buffer</summary>
            <param name="name">Name of the included file</param>
            <param name="parameters">optional, 0 or more parameters to be set before executing the template</param>
            <returns>Undefined</returns>
        </member>
        <member name="M:NetJS.API.XDoc.load(System.String,System.Object)">
            <summary>XDoc.load includes an XDoc template and returns the result.</summary>
            <param name="name">Name of the included file</param>
            <param name="parameters">optional, 0 or more parameters to be set before executing the template</param>
            <returns>The result of executing the file.</returns>
        </member>
    </members>
</doc>
