<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetJS</name>
    </assembly>
    <members>
        <member name="M:NetJS.API.Async.waitAll(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Runs multiple functions parallel and continues when all are done.</summary>
            <param name="function1">A function to execute</param>
            <param name="function2">A function to execute</param>
            <param name="functionN">A function to execute</param>
            <example><code lang="javascript">Async.waitAll(
                () => SQL.execute("query1"),
                () => SQL.execute("query2"),
                () => IO.writeText("big file")
            );</code></example>
        </member>
        <member name="M:NetJS.API.Async.waitAny(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Runs multiple functions parallel and continues when one of them is done.</summary>
            <param name="function1">A function to execute</param>
            <param name="function2">A function to execute</param>
            <param name="functionN">A function to execute</param>
            <example><code lang="javascript">Async.waitAny(
                () => task1(),
                () => task2(),
                () => task3()
            );</code></example>
        </member>
        <member name="M:NetJS.API.Async.run(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Runs multiple functions parallel and continues immediately. It doesn't wait for them to be done.</summary>
            <param name="function1">A function to execute</param>
            <param name="function2">A function to execute</param>
            <param name="functionN">A function to execute</param>
            <example><code lang="javascript">Async.run(
                () => SQL.execute("query1"),
                () => SQL.execute("query2"),
                () => IO.writeText("big file")
            );</code></example>
        </member>
        <member name="M:NetJS.API.Async.sleep(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Sleeps for a given number of milliseconds.</summary>
            <param name="time">Milliseconds to sleep (number)</param>
            <example><code lang="javascript">Async.sleep(1000);</code></example>
        </member>
        <member name="M:NetJS.API.Base64.decode(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Decodes a base64 string.</summary>
            <param name="base64">The string to decode</param>
            <returns>Returns the decoded string.</returns>
            <example><code lang="javascript">var decoded = Base64.decode("TWFuIGlzIGRpc3Rpbmd1aXNoZWQ=");</code></example>
        </member>
        <member name="M:NetJS.API.Base64.encode(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Encodes a string as a base64 string.</summary>
            <param name="s">The string to encode</param>
            <returns>Returns the encoded string.</returns>
            <example><code lang="javascript">var encoded = Base64.encode("Man is distinguished");</code></example>
        </member>
        <member name="T:NetJS.API.Functions">
            <summary>Functions class contain functions that are injected directly into the engine.</summary>
        </member>
        <member name="M:NetJS.API.Functions.include(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>include  takes a file, runs the code in the file and writes the result to the output buffer.
            If an object is given as second parameter, those variables will be set in the code before execution.
            Default filetype is ".js".</summary>
            <param name="file">The file to include</param>
            <param name="variables">An object with variables to setup the file before execution</param>
            <example><code lang="javascript">include("renderLayout.js", {loggedIn: true});</code></example>
        </member>
        <member name="M:NetJS.API.Functions.load(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>load takes a file, runs the code in the file and returns the value.
            If an object is given as second parameter, those variables will be set in the code before execution.
            Default filetype is ".js".</summary>
            <param name="file">The file to load</param>
            <param name="variables">An object with variables to setup the file before execution</param>
            <returns>Returns the output of the template.</returns>
            <example><code lang="javascript">var output = load("renderLayout.js", {loggedIn: true});</code></example>
        </member>
        <member name="M:NetJS.API.Functions.out(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>out writes a string to the output buffer</summary>
            <param name="value">The string to write</param>
            <example><code lang="javascript">out(JSON.stringify(data));</code></example>
        </member>
        <member name="M:NetJS.API.Functions.outLine(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>outLine writes a string to the output buffer and appends a newline</summary>
            <param name="value">The string to write</param>
            <example><code lang="javascript">outLine(JSON.stringify(data));</code></example>
        </member>
        <member name="M:NetJS.API.Functions.import(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>import takes a file and runs the code in the file with the current agent.
            This way functions and variables can be imported.
            Default filetype is ".js".</summary>
            <param name="file">The file to import</param>
            <example><code lang="javascript">import("date");
            FormatDate(new Date());</code></example>
        </member>
        <member name="M:NetJS.API.Functions.redirect(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>redirect takes an url and redirects a HttpResponse to the given url.</summary>
            <param name="url">A url to redirect to</param>
            <example><code lang="javascript">redirect("https://google.com/search?q=hello+world");</code></example>
        </member>
        <member name="M:NetJS.API.Functions.unsafe(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Runs unsafe code (loops)</summary>
            <param name="function">The function to execute</param>
            <example><code lang="javascript">unsafe(function(){
                while(true){}
            });</code></example>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NetJS.API.HTTP" -->
        <member name="M:NetJS.API.HTTP.execute(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Executes a HTTP request.</summary>
            <param name="connectionName">A connection from the connections.json or an url</param>
            <param name="query">The query to attach to the url (only usable when connectionName is not an url)</param>
            <param name="options">Optional settings: method (string), content (string), cookies (object), headers (object)</param>
            <returns>Returns the response, as a json object if response Content-Type is 'application/json'.</returns>
            <example><code lang="javascript">var result = HTTP.execute("REST", "articles", {
                method: "POST",
                content: JSON.stringify(article),
                cookies: {
                    UserID: "23433"
                },
                headers: {
                    ApplicationID: "NetJS"
                }
            });</code></example>
            <exception cref="T:NetJS.Core.Error">Thrown if the request failed</exception>
        </member>
        <member name="T:NetJS.API.IO">
            <summary>IO class contains methods for file and directory manipulation.</summary>
            <example>IO can read, write and delete a file:
            <code lang="javascript">var file = "example.txt";
            IO.write(file, "Hello World!");
            console.log(IO.read(file); //prints: Hello World!
            IO.deleteFile(file);</code></example>
        </member>
        <member name="M:NetJS.API.IO.writeText(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Writes text into a file.</summary>
            <param name = "file">A filename (string)</param>
            <param name = "content">The text to be written (string)</param>
            <example><code lang="javascript">IO.writeText("data.json", "Hello World!");</code></example>
        </member>
        <member name="M:NetJS.API.IO.writeBytes(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Writes bytes into a file.</summary>
            <param name = "file">A filename</param>
            <param name = "content">The bytes to be written (Uint8Array)</param>
            <example><code lang="javascript">IO.writeBytes("image.png", bytes);</code></example>
        </member>
        <member name="M:NetJS.API.IO.readText(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Reads and returns text content of a file.</summary>
            <param name= "file">A filename to read from (string)</param>
            <returns>The content of the file (string)</returns>
            <example><code lang="javascript">var text = IO.readText("data.json");</code></example>
        </member>
        <member name="M:NetJS.API.IO.readBytes(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Reads and returns binary content of a file.</summary>
            <param name= "file">A filename to read from (string)</param>
            <returns>The binary content of the file (Uint8Array)</returns>
            <example><code lang="javascript">var bytes = IO.readBytes("image.png");</code></example>
        </member>
        <member name="M:NetJS.API.IO.deleteFile(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Deletes a file.</summary>
            <param name= "file">A filename to delete</param>
            <example><code lang="javascript">IO.deleteFile("data.json");</code></example>
        </member>
        <member name="M:NetJS.API.IO.copyFile(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Copies a file.</summary>
            <param name= "source">The file to copy</param>
            <param name= "destination">The file to copy to</param>
            <example><code lang="javascript">IO.copyFile("a.txt", "b.txt");</code></example>
        </member>
        <member name="M:NetJS.API.IO.moveFile(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Moves/renames a file.</summary>
            <param name= "source">The source location</param>
            <param name= "destination">The destination</param>
            <example><code lang="javascript">IO.moveFile("a.txt", "files/b.txt");</code></example>
        </member>
        <member name="M:NetJS.API.IO.moveDirectory(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Moves/renames a directory.</summary>
            <param name= "source">The source location</param>
            <param name= "destination">The destination</param>
            <example><code lang="javascript">IO.moveDirectory("files", "documents/files");</code></example>
        </member>
        <member name="M:NetJS.API.IO.getFiles(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Get all files in a directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">var files = IO.getFiles("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.getDirectories(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Get all directories in a directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">var directories = IO.getDirectories("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.fileExists(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Checks if the file exists.</summary>
            <param name= "file">The file path</param>
            <example><code lang="javascript">var exists = IO.fileExists("name.txt");</code></example>
        </member>
        <member name="M:NetJS.API.IO.directoryExists(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Checks if the directory exists.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">var exists = IO.directoryExists("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.createDirectory(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Creates a new directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">IO.createDirectory("documents");</code></example>
        </member>
        <member name="M:NetJS.API.IO.deleteDirectory(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Deletes a directory.</summary>
            <param name= "directory">The directory path</param>
            <example><code lang="javascript">IO.deleteDirectory("documents");</code></example>
        </member>
        <member name="T:NetJS.API.Log">
            <summary>Log class contains methods for logging to a file.</summary>
        </member>
        <member name="M:NetJS.API.Log.write(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Writes a log to the system configured log.</summary>
            <param name="log">The log that needs to be written</param>
            <example><code lang="javascript">Log.write("Hello world!");</code></example>
            <exception cref="T:NetJS.Core.InternalError">Thrown when there is no application in the application lex.</exception>
        </member>
        <member name="T:NetJS.API.Session">
            <summary>Sessions are implemented using ASP.NET. You can use the session to store and retrieve values.</summary>
            <remarks>This class can set, get and remove key-value pairs.
            Unlike SessionStorage in browsers, this session allows you to store all types of variables instread of only strings.</remarks>
            <example name="Functions implementation">Here you can see the functions of this class in action:
            <code lang="javascript">Sessions.set("key", "value");
            console.log(Sessions.get("key"); //prints: value
            Sessions.delete("key");</code></example>
        </member>
        <member name="M:NetJS.API.Session.get(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Sessions.get takes a key, gets the value linked in the session and returns the value.</summary>
            <param name="key">The key to get a value from</param>
            <returns>Value linked to key.</returns>
            <example><code lang="javascript">var value = Sessions.get("userID");</code></example>
        </member>
        <member name="M:NetJS.API.Session.set(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Sessions.set takes a key and a value and sets the link in the session.</summary>
            <param name="key">The key to set a value with</param>
            <param name="value">The value to link to the key</param>
            <example><code lang="javascript">Session.set("userId", user.id);</code></example>
        </member>
        <member name="M:NetJS.API.Session.remove(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Sessions.remove takes a key and removes it from the session.</summary>
            <param name="key">The key to get a value from</param>
            <example><code lang="javascript">Sessions.remove("userId");</code></example>
        </member>
        <member name="M:NetJS.API.Session.clear(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Sessions.clear removes all values from the session.</summary>
            <example><code lang="javascript">Sessions.clear();</code></example>
        </member>
        <member name="M:NetJS.API.Session.getAll(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Sessions.getAll returns the entire session object.</summary>
            <returns>Object containing all keys and values.</returns>
            <example><code lang="javascript">var session = Sessions.getAll();</code></example>
        </member>
        <member name="T:NetJS.API.SQL">
            <summary>SQL class contains basic methods for communicating with SQL databases configured in the config.</summary>
            <remarks>This class can make SELECT, UPDATE, INSERT and custom query's.
            Configuration is needed to make a DB connection.</remarks>
            <configuration>To enable acces to an SQL database, the connection must be defined in a file in the root of the project named 'connections.json'.
            <example>Configuration structure:<code lang="json">{"Data": {"type": "sql", "connectionString": "Server=example.com;Database=ExampleName;UserId=sa;Password=test"}}</code></example></configuration>
            <example name="Query's">This example expects to have the following connection in the configuration:<code lang="json">{"Data": {"type": "sql", "connectionString": "Server=example.com;Database=ExampleName;UserId=sa;Password=test"}}</code>
            We can INSERT a new user and UPDATE his values:
            <code lang="javascript">var db = "ExampleName";
            var user = {name: "Hello World!", mail: "HelloWorld@example.com"};
            var id = SQL.insert(db, "users", user);
            user.name = "NewExample"
            // updating our db user based on the id of insert
            SQL.set(db, "users", id, user);</code>
            Now let's check if everything went fine:
            <code lang="javascript">console.log(SQL.get(db, "users")); //Prints all users</code>
            And to set the db back, we delete the row with a custom query:
            <code lang="javascript">var query = "DELETE FROM users WHERE id = " + id.toString() + ";";
            SQL.execute(db, query);</code></example>
        </member>
        <member name="M:NetJS.API.SQL.escape(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Escapes a string to use in an SQL query.</summary>
            <param name="s">Value to escape (string)</param>
            <returns>The escaped string.</returns>
            <example><code lang="javascript">var escaped = SQL.escape(username);</code></example>
        </member>
        <member name="M:NetJS.API.SQL.format(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>Creates an escaped SQL query string with parameters.</summary>
            <param name="query">Template query (string)</param>
            <param name="parameters">Parameters (object)</param>
            <returns>The generated query (string)</returns>
            <example><code lang="javascript">var query = SQL.format("SELECT * FROM Users WHERE Name = {name};", {name: "Alex Jones"});
            // SELECT * FROM Users Where Name = 'Alex Jones';</code></example>
        </member>
        <member name="M:NetJS.API.SQL.execute(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>SQL.execute takes a connectionName and a query, executes the query and returns the result if the query is a SELECT statement.</summary>
            <param name="connectionName">Name of a configured connection</param>
            <param name="query">The query to be executed</param>
            <returns>the result if the query is a SELECT statement.</returns>
            <example><code lang="javascript">var id = SQL.execute("NETDB", "SELECT * FROM users;");</code></example>
            <exception cref="T:NetJS.Core.Error">Thrown when an error has been found while executing the query.</exception>
        </member>
        <member name="T:NetJS.API.XDoc">
            <summary>A Compatibility class for XDoc, to ensure possibility of usage of XDoc with NetJS.</summary>
        </member>
        <member name="M:NetJS.API.XDoc.include(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>XDoc.include includes an XDoc template and writes the result to the buffer</summary>
            <param name="name">Name of the included file</param>
            <param name="parameters">optional, 0 or more parameters to be set before executing the template</param>
            <returns>Undefined</returns>
            <exception cref="T:NetJS.Core.InternalError">Thrown when no application has been found in the application agent.</exception>
        </member>
        <member name="M:NetJS.API.XDoc.load(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>XDoc.load includes an XDoc template and returns the result.</summary>
            <param name="name">Name of the included file</param>
            <param name="parameters">optional, 0 or more parameters to be set before executing the template</param>
            <returns>The result of executing the file.</returns>
            <exception cref="T:NetJS.Core.InternalError">Thrown when no application has been found in the application agent.</exception>
        </member>
        <member name="M:NetJS.API.XDoc.get(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>XDoc.get gets a value from the XDoc session</summary>
            <param name="key">Value name</param>
            <param name="context">Context name</param>
            <param name="id">ID name</param>
            <returns>The session value as a string</returns>
            <exception cref="T:NetJS.Core.InternalError">Thrown when no application has been found in application agent.</exception>
        </member>
        <member name="M:NetJS.API.XDoc.set(NetJS.Core.Constant,NetJS.Core.Constant[],NetJS.Core.Agent)">
            <summary>XDoc.set sets a value in the XDoc session</summary>
            <param name="key">Value name</param>
            <param name="context">Context name</param>
            <param name="id">ID name</param>
            <param name="value">The value to set, is converted to a string</param>
            <returns>Undefined</returns>
            <exception cref="T:NetJS.Core.InternalError">Thrown when no application has been found in application agent.</exception>
        </member>
    </members>
</doc>
