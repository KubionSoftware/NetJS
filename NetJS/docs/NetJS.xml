<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetJS</name>
    </assembly>
    <members>
        <member name="T:NetJS.External.Functions">
            <summary>Functions class contain functions that are injected directly into the engine.</summary>
        </member>
        <member name="M:NetJS.External.Functions.include(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>include  takes a file, runs the code in the file and returns the value.
            If an object is given as second parameter, those variables will be set in the code before execution.
            Default filetype is ".js".</summary>
            <param name="file">The file to include</param>
            <param name="variables">An object with variables to setup the file before execution</param>
            <example><code lang="javascript">include("renderLayout.js", {loggedIn: true});</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application is found in application scope.</exception>
        </member>
        <member name="M:NetJS.External.Functions.import(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>import takes a file and runs the code in the file with the current scope.
            This way functions and variables can be imported.
            Default filetype is ".js".</summary>
            <param name="file">The file to import</param>
            <example><code lang="javascript">import("date");
            FormatDate(new Date());</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application is found in application scope.</exception>
        </member>
        <member name="M:NetJS.External.Functions.redirect(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>redirect takes an url and redirects a HttpResponse to the given url.</summary>
            <param name="url">A url to redirect to</param>
            <example><code lang="javascript">redirect("https://google.com/search?q=hello+world");</code></example>
        </member>
        <member name="T:NetJS.External.XDoc">
            <summary>A Compatibility class for XDoc, to ensure possibility of usage of XDoc with NetJS.</summary>
        </member>
        <member name="M:NetJS.External.XDoc.include(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>XDoc.include includes other XDoc templates and returns the result.</summary>
            <param name="name">Name of the included file</param>
            <param name="parameters">optional, 0 or more parameters to be set before executing the template</param>
            <returns>The result of executing the file.</returns>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application has been found in the application scope.</exception>
        </member>
        <member name="M:NetJS.External.XDoc.get(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>XDoc.get runs a svCache.GetSV with the given parameters.</summary>
            <param name="key">Key for identification</param>
            <param name="context">ContextName for sv</param>
            <param name="id">ID needed for svCache.GetSV, can be the returnvalue</param>
            <returns>The result of svCache.GetSV</returns>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application has been found in application scope.</exception>
        </member>
        <member name="T:NetJS.External.SQL">
            <summary>SQL class contains basic methods for communicating with SQL databases configured in the config.</summary>
            <remarks>This class can make SELECT, UPDATE, INSERT and custom query's.
            Configuration is needed to make a DB connection.</remarks>
            <configuration>To enable acces to an SQL database, the connection must be defined in a file in the root of the project named 'connections.json'.
            <example>Configuration structure:<code lang="json">{"Data": {"type": "sql", "connectionString": "Server=example.com;Database=ExampleName;UserId=sa;Password=test"}}</code></example></configuration>
            <example name="Query's">This example expects to have the following connection in the configuration:<code lang="json">{"Data": {"type": "sql", "connectionString": "Server=example.com;Database=ExampleName;UserId=sa;Password=test"}}</code>
            We can INSERT a new user and UPDATE his values:
            <code lang="javascript">var db = "ExampleName";
            var user = {name: "Hello World!", mail: "HelloWorld@example.com"};
            var id = SQL.insert(db, "users", user);
            user.name = "NewExample"
            // updating our db user based on the id of insert
            SQL.set(db, "users", id, user);</code>
            Now let's check if everything went fine:
            <code lang="javascript">console.log(SQL.get(db, "users")); //Prints all users</code>
            And to set the db back, we delete the row with a custom query:
            <code lang="javascript">var query = "DELETE FROM users WHERE id = " + id.toString() + ";";
            SQL.execute(db, query);</code></example>
        </member>
        <member name="M:NetJS.External.SQL.get(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>SQL.get takes a connectionName and a tablename and executes a SELECT * FROM [table] query which result will be returned.</summary>
            <param name="connectionName">Name of a configured connection</param>
            <param name="table">Tablename for SELECT statement</param>
            <returns>Response from database, in json.</returns>
            <example><code lang="javascript">var results = SQL.get("NetDB", "users");</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application can be found in application scope.</exception>
            <exception cref="T:System.Exception">Thrown when the type of the DB result can't be identified.</exception>
        </member>
        <member name="M:NetJS.External.SQL.set(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>SQL.set takes a connectionName, tablename, id and a object and executes a UPDATE statement and returns a boolean (only true).</summary>
            <param name="connectionName">Name of a configured connection</param>
            <param name="table">Tablename for UPDATE statement</param>
            <param name="id">ID of row for the UPDATE statement</param>
            <param name="info">An object with information to be updated to</param>
            <returns>A boolean (always true).</returns>
            <example><code lang="javascript">var results = SQL.set("NETDB", "users", 1, {name:"NetJS rules!"});</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application can be found in application scope.</exception>
        </member>
        <member name="M:NetJS.External.SQL.insert(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>SQL.insert takes a connectionName, table and a object which will be inserted into the database. The last inserted id will be returned.</summary>
            <param name="connectionName">Name of a configured connection</param>
            <param name="table">Tablename for INSERT statement</param>
            <param name="info">An object with information to be updated to</param>
            <returns>The ID of the last inserted row.</returns>
            <example><code lang="javascript">var id = SQL.insert("NETDB", "users", {name:"Hello World!"});</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application can be found in application scope.</exception>
        </member>
        <member name="M:NetJS.External.SQL.execute(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>SQL.execute takes a connectionName and a query, executes the query and returns the result if the query is a SELECT statement.</summary>
            <param name="connectionName">Name of a configured connection</param>
            <param name="query">The query to be executed</param>
            <returns>the result if the query is a SELECT statement.</returns>
            <example><code lang="javascript">var id = SQL.execute("NETDB", "SELECT * FROM users;");</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application can be found in application scope.</exception>
            <exception cref="T:NetJS.Core.Javascript.Error">Thrown when an error has been found while executing the query.</exception>
        </member>
        <member name="T:NetJS.External.HTTP">
            <summary>HTTP class handles HTTP methods for clients.</summary>
            <remarks>This class can create GET, POST and custom requests.</remarks>
        </member>
        <member name="M:NetJS.External.HTTP.get(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Executes a GET method and returns the response.</summary>
            <param name="url">the url to fire the GET method at</param>
            <returns>a string with a response.</returns>
            <example><code lang="javascript">var response = HTTP.get("https://google.com");</code></example>
        </member>
        <member name="M:NetJS.External.HTTP.post(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Executes a POST method and returns the response.</summary>
            <param name="url">The url to fire the POST method at</param>
            <param name="body">A body to attach to the POST method</param>
            <returns>a string with a response.</returns>
            <example><code lang="javascript">HTTP.post("https://google.com", {name: "newUser"}.ToString());</code></example>
        </member>
        <member name="M:NetJS.External.HTTP.execute(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Executes a GET method with a query.</summary>
            <param name="connectionName">A connection known in the application connections</param>
            <param name="query">The query to attach to the url</param>
            <returns>Returns the response, as a json object if possible.</returns>
            <example><code lang="javascript">HTTP.execute("google search", "q=hello+world");</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown if application not found in application scope.</exception>
        </member>
        <member name="T:NetJS.External.IO">
            <summary>IO class contains methods for file manipulation.</summary>
            <remarks>IO can execute read, write and delete actions on a file.</remarks>
            <example>IO can read, write and delete a file:
            <code lang="javascript">var file = "example.txt";
            IO.write(file, "Hello World!");
            console.log(IO.read(file); //prints: Hello World!
            IO.delete(file);</code></example>
        </member>
        <member name="M:NetJS.External.IO.write(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Writes content into a file.</summary>
            <param name = "file">A filename</param>
            <param name = "content">The content to be written</param>
            <example><code lang="javascript">IO.write("data.json", { name: "Hello World!");</code></example>
            <exception cref = "T:NetJS.Core.Javascript.InternalError">Thrown when no application can be found in the application scope.</exception>
        </member>
        <member name="M:NetJS.External.IO.read(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Reads and returns content of a file.</summary>
            <param name= "file">A filename to read from </param>
            <returns>The content of the file.</returns>
            <example><code lang="javascript">var content = IO.read("data.json");</code></example>
            <exception cref = "T:NetJS.Core.Javascript.InternalError">Thrown when no application can be found in the application scope.</exception>
        </member>
        <member name="M:NetJS.External.IO.delete(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Deletes a file.</summary>
            <param name= "file">A filename to delete</param>
            <example><code lang="javascript">IO.delete("data.json");</code></example>
            <exception cref = "T:NetJS.Core.Javascript.InternalError">Thrown when no application can be found in the application scope.</exception>
        </member>
        <member name="T:NetJS.External.Log">
            <summary>Log class contains methods for logging to a file.</summary>
        </member>
        <member name="M:NetJS.External.Log.write(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Writes a log to the system configured log.</summary>
            <param name="log">The log that needs to be written</param>
            <example><code lang="javascript">Log.write("Hello world!");</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when there is no application in the application scope.</exception>
        </member>
        <member name="T:NetJS.External.Session">
            <summary>Sessions are implemented using ASP.NET. You can use the session to store and retrieve values.</summary>
            <remarks>This class can set, get and delete key-value pairs.
            Unlike SessionStorage in browsers, this session allows you to store all types of variables instread of only strings.</remarks>
            <example name="Functions implementation">Here you can see the functions of this class in action:
            <code lang="javascript">Sessions.set("key", "value");
            console.log(Sessions.get("key"); //prints: value
            Sessions.delete("key");</code></example>
        </member>
        <member name="M:NetJS.External.Session.get(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Sessions.get takes a key, gets the value linked in the session and returns the value.</summary>
            <param name="key">The key to get a value from</param>
            <returns>Value linked to key.</returns>
            <example><code lang="javascript">var value = Sessions.get("userID");</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application has been found in application scope.</exception>
        </member>
        <member name="M:NetJS.External.Session.set(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Sessions.set takes a key and a value and sets the link in the session.</summary>
            <param name="key">The key to set a value with</param>
            <param name="value">The value to link to the key</param>
            <example><code lang="javascript">Session.set("userId", user.id);</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application has been found in application scope.</exception>
        </member>
        <member name="M:NetJS.External.Session.delete(NetJS.Core.Javascript.Constant,NetJS.Core.Javascript.Constant[],NetJS.Core.Javascript.Scope)">
            <summary>Sessions.delete takes a key and removes it from the session.</summary>
            <param name="key">The key to get a value from</param>
            <example><code lang="javascript">Sessions.delete("userId");</code></example>
            <exception cref="T:NetJS.Core.Javascript.InternalError">Thrown when no application has been found in application scope.</exception>
        </member>
    </members>
</doc>
